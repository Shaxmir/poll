import asyncio
from aiogram import Bot, Dispatcher, F
from aiogram.types import Message, CallbackQuery, InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.filters import Command, CommandStart
import logging
from collections import defaultdict
from operator import itemgetter

# --- –ö–æ–Ω—Ñ–∏–≥ ---
API_TOKEN = "8065857722:AAEwSlrEEIAtxxBY4WDr04csKrGjXubIBUw"
ADMIN_USER_IDS = (764614936, 997838012)

# --- FSM —Å–æ—Å—Ç–æ—è–Ω–∏—è ---
class PollStates(StatesGroup):
    waiting_for_title = State()
    waiting_for_options = State()
    waiting_for_duration = State()
    waiting_for_winners = State()

# --- –í—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ ---
polls = {}  # poll_id: {"title": str, "options": [str], "votes": defaultdict(user_id -> option), "winners": int}
user_votes = defaultdict(dict)  # poll_id: {user_id: option}
message_ids = {}  # poll_id: message_id

# --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è ---
bot = Bot(token=API_TOKEN)
dp = Dispatcher(storage=MemoryStorage())


# @dp.message()
# async def get_chat_id(message: Message):
#     await message.answer(f"Chat ID: {message.chat.id}")

# --- –ö–æ–º–∞–Ω–¥–∞ /poll ---
@dp.message(Command("poll"))
async def cmd_poll(message: Message, state: FSMContext):
    if message.from_user.id not in ADMIN_USER_IDS:
        return await message.answer("‚õî –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω –º–æ–∂–µ—Ç —Å–æ–∑–¥–∞–≤–∞—Ç—å –æ–ø—Ä–æ—Å—ã.")

    await state.set_state(PollStates.waiting_for_title)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –æ–ø—Ä–æ—Å–∞:")

@dp.message(PollStates.waiting_for_title)
async def poll_title(message: Message, state: FSMContext):
    await state.update_data(title=message.text)
    await state.set_state(PollStates.waiting_for_options)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é:")

@dp.message(PollStates.waiting_for_options)
async def poll_options(message: Message, state: FSMContext):
    options = [opt.strip() for opt in message.text.split(",") if opt.strip()]
    if len(options) < 2:
        return await message.answer("–ù—É–∂–Ω–æ —Ö–æ—Ç—è –±—ã –¥–≤–∞ –≤–∞—Ä–∏–∞–Ω—Ç–∞.")

    await state.update_data(options=options)
    await state.set_state(PollStates.waiting_for_duration)
    await message.answer("–ù–∞ —Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç –±—É–¥–µ—Ç –¥–ª–∏—Ç—å—Å—è –æ–ø—Ä–æ—Å? –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 1):")

@dp.message(PollStates.waiting_for_duration)
async def poll_duration(message: Message, state: FSMContext):
    if not message.text.isdigit():
        return await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 1):")

    duration_minutes = int(message.text)
    await state.update_data(duration=duration_minutes)
    await state.set_state(PollStates.waiting_for_winners)
    await message.answer("–°–∫–æ–ª—å–∫–æ –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π –±—É–¥–µ—Ç? –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ:")

@dp.message(PollStates.waiting_for_winners)
async def poll_winners(message: Message, state: FSMContext):
    if not message.text.isdigit():
        return await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ:")

    winners = int(message.text)
    data = await state.get_data()
    await state.clear()

    poll_id = str(message.message_id)
    polls[poll_id] = {
        "title": data["title"],
        "options": data["options"],
        "votes": defaultdict(int),
        "winners": winners
    }

    buttons = [
        [InlineKeyboardButton(text=f'‚òëÔ∏è {opt}', callback_data=f"vote:{poll_id}:{i}")]
        for i, opt in enumerate(data["options"])
    ]
    markup = InlineKeyboardMarkup(inline_keyboard=buttons)

    GROUP_CHAT_ID = -1002315370924  # –∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ ID –≤–∞—à–µ–π –≥—Ä—É–ø–ø—ã

    sent = await bot.send_message(
        chat_id=GROUP_CHAT_ID,
        text=f"üó≥Ô∏è {data['title']}\n–ì–æ–ª–æ—Å—É–π—Ç–µ –Ω–∏–∂–µ:",
        reply_markup=markup
    )
    await bot.pin_chat_message(chat_id=GROUP_CHAT_ID, message_id=sent.message_id, disable_notification=True)
    message_ids[poll_id] = sent.message_id

    # –ó–∞–ø—É—Å—Ç–∏—Ç—å —Ç–∞–π–º–µ—Ä –Ω–∞ –æ–∫–æ–Ω—á–∞–Ω–∏–µ –æ–ø—Ä–æ—Å–∞
    asyncio.create_task(finish_poll_after(poll_id, sent.chat.id, data["duration"] * 60))

# --- –û–±—Ä–∞–±–æ—Ç–∫–∞ –≥–æ–ª–æ—Å–æ–≤ ---
@dp.callback_query(F.data.startswith("vote:"))
async def handle_vote(callback: CallbackQuery):
    _, poll_id, index = callback.data.split(":")
    user_id = callback.from_user.id

    if user_id in user_votes[poll_id]:
        return await callback.answer("‚õî –¢—ã —É–∂–µ –≥–æ–ª–æ—Å–æ–≤–∞–ª.", show_alert=True)

    option = polls[poll_id]["options"][int(index)]
    polls[poll_id]["votes"][option] += 1
    user_votes[poll_id][user_id] = option

    # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –Ω–∞ –∫–Ω–æ–ø–∫–∞—Ö —Å –Ω–æ–≤—ã–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –≥–æ–ª–æ—Å–æ–≤
    buttons = [
        [InlineKeyboardButton(text=f'‚òëÔ∏è {opt} ‚Äî {polls[poll_id]["votes"].get(opt, 0)} –≥–æ–ª–æ—Å–æ–≤', callback_data=f"vote:{poll_id}:{i}")]
        for i, opt in enumerate(polls[poll_id]["options"])
    ]
    markup = InlineKeyboardMarkup(inline_keyboard=buttons)

    # –û–±–Ω–æ–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –Ω–∞ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏
    await callback.message.edit_reply_markup(reply_markup=markup)

    await callback.answer("‚úÖ –í—ã –ø—Ä–æ–≥–æ–ª–æ—Å–æ–≤–∞–ª–∏. –°–ø–∞—Å–∏–±–æ!", show_alert=True)



# --- –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –æ–ø—Ä–æ—Å–∞ ---
async def finish_poll_after(poll_id: str, chat_id: int, delay: int):
    await asyncio.sleep(delay)

    if poll_id not in polls:
        return

    poll = polls[poll_id]
    options = poll["options"]
    votes = poll["votes"]
    winners = poll["winners"]

    # –°–æ–±–∏—Ä–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å —É—á–µ—Ç–æ–º 0 –≥–æ–ª–æ—Å–æ–≤
    results = [(option, votes.get(option, 0)) for option in options]
    results.sort(key=itemgetter(1), reverse=True)

    text = f"ü•á{poll['title']}\n–û–ø—Ä–æ—Å –æ–∫–æ–Ω—á–µ–Ω!\n\n–†–µ–∑—É–ª—å—Ç–∞—Ç—ã:\n"

    for i, (option, count) in enumerate(results):
        medal = "ü•á" if i < winners else "‚ûñ"
        text += f"{medal} {option} ‚Äî {count} –≥–æ–ª–æ—Å–æ–≤\n"

    await bot.send_message(chat_id, text)
    await bot.unpin_chat_message(chat_id=chat_id, message_id=message_ids[poll_id])

    # –£–¥–∞–ª—è–µ–º –∏–∑ –ø–∞–º—è—Ç–∏
    polls.pop(poll_id, None)
    user_votes.pop(poll_id, None)
    message_ids.pop(poll_id, None)



@dp.message(Command("results"))
async def cmd_results(message: Message):
    for poll_id, poll in polls.items():
        options = poll["options"]
        votes = poll["votes"]
        winners = poll["winners"]

        results = [(option, votes.get(option, 0)) for option in options]
        results.sort(key=itemgetter(1), reverse=True)

        text = f"‚è≥{poll['title']}\n–†–∞–Ω–Ω–∏–π –¥–æ—Å—Ç—É–ø –∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º:\n"
        for i, (option, count) in enumerate(results):
            medal = "ü•á" if i < winners else "‚ûñ"
            text += f"{medal} {option} ‚Äî {count} –≥–æ–ª–æ—Å–æ–≤\n"

        await message.answer(text)





#-----–ó–∞–ø—Ä–æ—Å —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤ –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
from aiogram import F
from aiogram.types import FSInputFile, InputMediaPhoto
from aiogram.utils.media_group import MediaGroupBuilder

@dp.message(F.text.lower().in_({"–ø–µ—Ä–µ–≤–æ–¥", "translate", "translation"}))
async def explain_translation(message: Message):
    text = (
        "–í–æ—Ç –∫–∞–∫ –º–æ–∂–Ω–æ –ø–µ—Ä–µ–≤–µ—Å—Ç–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –¥—Ä—É–≥–∏—Ö –∏–≥—Ä–æ–∫–æ–≤ –≤ —á–∞—Ç–µ.\n"
        "Here's how you can translate other players' messages in the chat."
    )

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç
    await message.answer(text)

    # –°–æ–±–∏—Ä–∞–µ–º —Ñ–æ—Ç–æ –≤ –∞–ª—å–±–æ–º
    builder = MediaGroupBuilder()
    image_paths = ["images/translation/step1.jpg", "images/translation/step2.jpg", "images/translation/step3.jpg", "images/translation/step4.jpg",]

    for path in image_paths:
        builder.add_photo(media=FSInputFile(path))

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞–ª—å–±–æ–º
    await message.answer_media_group(builder.build())


# --- –°—Ç–∞—Ä—Ç ---
async def main():
    logging.basicConfig(level=logging.INFO)
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
